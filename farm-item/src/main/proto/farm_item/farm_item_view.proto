syntax = "proto3";

package com.lightbend.farmtrust.farmitem.view;

option java_outer_classname = "FarmItemViewModel";

import "farm_item/farm_item_domain.proto";
import "akkaserverless/annotations.proto";

message ResponseCollection {
  repeated domain.FarmItemState results = 1;
}

service FarmItemByFarmLand {
  rpc UpdateFarmItem(domain.FarmItemState) returns (domain.FarmItemState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "farmitem"
    };
    option (akkaserverless.method).view.update = {
      table: "farmitemtable"
    };
  }

  rpc GetFarmItem(ByFarmLandRequest) returns (ResponseCollection) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS results FROM farmitemtable WHERE farm_land_id = :farm_land_id AND itemStatus = :itemStatus"
    };
  }
}

message ByFarmLandRequest {
  string farm_land_id = 1;
  string itemStatus = 2;
}





service FarmItemByFarmer {
  rpc UpdateFarmItem(domain.FarmItemState) returns (domain.FarmItemState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "farmitem"
    };
    option (akkaserverless.method).view.update = {
      table: "farmitemtable"
    };
  }

  rpc GetFarmItem(ByFarmerRequest) returns (ResponseCollection) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS results FROM farmitemtable WHERE farmer_name = :farmer_name AND itemStatus = :itemStatus"
    };
  }
}

message ByFarmerRequest {
  string farmer_name = 1;
  string itemStatus = 2;
}

service FarmItemByCrop {
  rpc UpdateFarmItem(domain.FarmItemState) returns (domain.FarmItemState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "farmitem"
    };
    option (akkaserverless.method).view.update = {
      table: "farmitemtable"
    };
  }

  rpc GetFarmItem(ByCropRequest) returns (ResponseCollection) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS results FROM farmitemtable WHERE crop_name = :crop_name AND itemStatus = :itemStatus"
    };
  }
}

message ByCropRequest {
  string crop_name = 1;
  string itemStatus = 2;
}

service FarmItemBySoldUser {
  rpc UpdateFarmItem(domain.FarmItemState) returns (domain.FarmItemState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "farmitem"
    };
    option (akkaserverless.method).view.update = {
      table: "farmitemtable"
    };
  }

  rpc GetFarmItem(BySoldUserRequest) returns (ResponseCollection) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS results FROM farmitemtable WHERE boughtByUser = :boughtByUser"
    };
  }
}

message BySoldUserRequest {
  string boughtByUser = 1;
}